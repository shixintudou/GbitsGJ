// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Shake

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
float4 _BufferSize;
float _ShakeIntensity;
Texture2D _MainTex;
Texture2D _CameraColorTexture;
RWTexture2D<float4> Result;

SAMPLER(sampler_linear_clamp);

float randomNoise(float x, float y)
{
    return frac(sin(dot(float2(x, y), float2(127.1, 311.7))) * 43758.5453);
}

[numthreads(8,8,1)]
void Shake(uint3 id : SV_DispatchThreadID)
{
    float2 resolution = _BufferSize.xy;
    float2 invResolution = _BufferSize.zw;
    float2 uv = (id.xy + 0.5) * invResolution;

    float shake1 = (randomNoise(_Time.x, 2) - 0.5) * _ShakeIntensity;
    float shake2 = (randomNoise(6, _Time.x) - 0.5) * _ShakeIntensity;

    float4 sceneColor = _CameraColorTexture.SampleLevel(sampler_linear_clamp, frac(float2(uv.x + shake1, uv.y + shake2)), 0);
    
    Result[id.xy] = sceneColor;
}
